(window.webpackJsonp=window.webpackJsonp||[]).push([[446],{877:function(a,n,l){"use strict";l.r(n);var o=l(29),t=Object(o.a)({},(function(){var a=this,n=a.$createElement,l=a._self._c||n;return l("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[l("blockquote",{staticClass:"wp-block-quote"},[a._v("俗话说面试造航母，入职拧螺丝，要想找到好工作，当然要好好的啃一啃原生JS。面试经常会问到：")]),a._v(" "),l("ol",[l("li",[a._v("怎么利用call、apply来求一个数组中最大或者最小值2. 如何利用call、apply来做继承3. apply、call、bind的区别和主要应用场景\n")])]),a._v(" "),l("h2",{attrs:{id:"作用"}},[a._v("作用")]),a._v(" "),l("blockquote",{staticClass:"wp-block-quote"},[a._v("首先，这三个函数都是** 改变函数执行时的上下文 **，也就是this指向。有了这个认识，接下来我们来看一下，怎么使用这三个函数。")]),a._v(" "),l("p",[a._v("** 比如 **\n")]),a._v(" "),l("pre",{staticClass:"wp-block-code"},[l("code",[a._v("function Person(name){\n  this.name = name;\n}\nPerson.prototype = {\n  constructor: Person,\n  showName: function(){\n    console.log(this.name);\n  }\n}\nvar person = new Person('qianlong');\nperson.showName();")])]),a._v(" "),l("p",[a._v("上面的代码中person调用showName方法后会在浏览器的控制台输出"),l("code",[a._v("qianlong")])]),a._v(" "),l("p",[a._v("** 接下来 **\n")]),a._v(" "),l("pre",{staticClass:"wp-block-code"},[l("code",[a._v("var animal = {\n  name: 'cat'\n}")])]),a._v(" "),l("p",[a._v("上面代码中有一个对象字面量，他没有所谓的showName方法，但是我还是想用？怎么办？不过没关系，call、apply、bind可以帮我们干这件事。\n")]),a._v(" "),l("pre",{staticClass:"wp-block-code"},[l("code",[a._v("// 1 call\nperson.showName.call(animal);\n// 2 apply\nperson.showName.apply(animal);\n// 3 bind\nperson.showName.bind(animal)();")])]),a._v(" "),l("p",[a._v("** 控制台输出了三次"),l("code",[a._v("cat **")])]),a._v(" "),l("p",[a._v("我们拿别人的showName方法，并动态改变其** 上下文 "),l("strong",[a._v("帮自己输出了信息，说到底就是实现了")]),a._v(" 复用 **\n")]),a._v(" "),l("h2",{attrs:{id:"区别"}},[a._v("区别")]),a._v(" "),l("blockquote",{staticClass:"wp-block-quote"},[a._v("上面看起来三个函数的作用差不多，干的事几乎是一样的，那为什么要存在3个家伙呢，留一个不就可以。所以其实他们干的事从本质上讲都是一样的** 动态的改变this上下文 **,但是多少还是有一些差别的..")]),a._v(" "),l("p",[a._v("** call、apply与bind的差别 **\n")]),a._v(" "),l("blockquote",{staticClass:"wp-block-quote"},[a._v("call和apply改变了函数的** this **上下文后便** 执行 **该函数,而bind则是返回改变了上下文后的一个函数。")]),a._v(" "),l("p",[a._v("** call、apply的区别 **\n")]),a._v(" "),l("blockquote",{staticClass:"wp-block-quote"},[a._v("他们俩之间的差别在于参数的区别，call和aplly的第一个参数都是要改变上下文的对象，而call从第二个参数开始以参数列表的形式展现，apply则是把除了改变上下文对象的参数放在一个数组里面作为它的第二个参数。")]),a._v(" "),l("pre",{staticClass:"wp-block-code"},[l("code",[a._v("fn.call(obj, arg1, arg2, arg3...);\nfn.apply(obj, [arg1, arg2, arg3...]);")])]),a._v(" "),l("h2",{attrs:{id:"应用"}},[a._v("应用")]),a._v(" "),l("blockquote",{staticClass:"wp-block-quote"},[a._v("知道了怎么使用和他们之间的区别，接下来我们来了解一下通过call、apply、bind的常见应用场景。")]),a._v(" "),l("ul",[l("li",[a._v("** 求数组中的最大和最小值 **\n")])]),a._v(" "),l("pre",{staticClass:"wp-block-code"},[l("code",[a._v("var arr = [34,5,3,6,54,6,-67,5,7,6,-8,687];\nMath.max.apply(Math, arr);\nMath.max.call(Math, 34,5,3,6,54,6,-67,5,7,6,-8,687);\nMath.min.apply(Math, arr);\nMath.min.call(Math, 34,5,3,6,54,6,-67,5,7,6,-8,687);")])]),a._v(" "),l("ul",[l("li",[a._v("** 将伪数组转化为数组 **\n")])]),a._v(" "),l("blockquote",{staticClass:"wp-block-quote"},[a._v("js中的伪数组(例如通过"),l("code",[a._v("document.getElementsByTagName")]),a._v("获取的元素)具有length属性，并且可以通过0、1、2...下标来访问其中的元素，但是没有Array中的push、pop等方法。我们可以利用call、apply来将其转化为真正的数组这样便可以方便地使用数组方法了。")]),a._v(" "),l("pre",{staticClass:"wp-block-code"},[l("code",[a._v("var arrayLike = {\n  0: 'qianlong',\n  1: 'ziqi',\n  2: 'qianduan',\n  length: 3\n}")])]),a._v(" "),l("p",[a._v("上面就是一个普通的对象字面量，怎么把它变成一个数组呢？最简单的方法就是\n")]),a._v(" "),l("pre",{staticClass:"wp-block-code"},[l("code",[a._v("var arr = [].slice.call(arrayLike);")])]),a._v(" "),l("p",[a._v("上面arr便是一个包含arrayLike元素的真正的数组啦( ** 注意数据结构必须是以数字为下标而且一定要有length属性 ** )\n")]),a._v(" "),l("ul",[l("li",[a._v("** 数组追加 **\n")])]),a._v(" "),l("blockquote",{staticClass:"wp-block-quote"},[a._v("在js中要往数组中添加元素，可以直接用push方法，")]),a._v(" "),l("pre",{staticClass:"wp-block-code"},[l("code",[a._v("var arr1 = [1,2,3];\nvar arr2 = [4,5,6];\n[].push.apply(arr1, arr2);\n// arr1 [1, 2, 3, 4, 5, 6]\n// arr2 [4,5,6]")])]),a._v(" "),l("p",[a._v("** 判断变量类型 **\n")]),a._v(" "),l("blockquote",{staticClass:"wp-block-quote"},[a._v("对于对象型的数据类型，我们可以借助call来得知他的具体类型，例如数组")]),a._v(" "),l("pre",{staticClass:"wp-block-code"},[l("code",[a._v("function isArray(obj){\n  return Object.prototype.toString.call(obj) == '[object Array]';\n}\nisArray([]) // true\nisArray('qianlong') // false")])]),a._v(" "),l("p",[a._v("** 利用call和apply做继承 **\n")]),a._v(" "),l("pre",{staticClass:"wp-block-code"},[l("code",[a._v("var Person = function (name, age) {\n  this.name = name;\n  this.age = age;\n};\nvar Girl = function (name) {\n  Person.call(this, name);\n};\nvar Boy = function (name, age) {\n  Person.apply(this, arguments);\n}\nvar g1 = new Girl ('qing');\nvar b1 = new Boy('qianlong', 100);")])])])}),[],!1,null,null,null);n.default=t.exports}}]);